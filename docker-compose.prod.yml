#
# Docker Compose configuration for Production deployment of SovereigntyOS.
#
# This file defines a multi-container setup for a production environment.
# It includes the main application, a database, a cache, a reverse proxy,
# and monitoring services. It is designed to be robust, with health checks,
# restart policies, and persistent data volumes.
#
version: '3.8'

services:
  # The main application service.
  app:
    # Builds the Docker image from the current directory.
    # The 'target: production' specifies that it should build up to the
    # 'production' stage defined in the Dockerfile, creating an optimized image.
    build:
      context: .
      target: production
    container_name: sovereigntyos-app
    # The application runs on port 3000 inside the container.
    ports:
      - "3000:3000"
    # Environment variables required for the application to run in production.
    # It uses default values if the variables are not set in the host environment.
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://${DB_USER:-sovereignty}:${DB_PASSWORD:-sovereignty123}@postgres:5432/${DB_NAME:-sovereignty}
      - REDIS_URL=redis://redis:6379
      - MANUS_API_KEY=${MANUS_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
    # Ensures that the 'postgres' and 'redis' services are healthy before starting the app.
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Always restarts the container unless it is explicitly stopped.
    restart: unless-stopped
    # Defines a health check to ensure the application is running correctly.
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Connects the service to the custom bridge network.
    networks:
      - sovereigntyos-network

  # The PostgreSQL database service.
  postgres:
    image: postgres:15-alpine
    container_name: sovereigntyos-postgres
    environment:
      - POSTGRES_DB=${DB_NAME:-sovereignty}
      - POSTGRES_USER=${DB_USER:-sovereignty}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-sovereignty123}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    # Persists database data using a named volume.
    # Mounts an SQL script to initialize the database on first run.
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-sovereignty} -d ${DB_NAME:-sovereignty}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sovereigntyos-network

  # The Redis in-memory cache service.
  redis:
    image: redis:7-alpine
    container_name: sovereigntyos-redis
    # Starts Redis with append-only file persistence and password protection.
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-redis123}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - sovereigntyos-network

  # The Nginx reverse proxy service.
  nginx:
    image: nginx:alpine
    container_name: sovereigntyos-nginx
    ports:
      - "80:80"
      - "443:443"
    # Mounts production Nginx configuration, SSL certificates, and logs.
    volumes:
      - ./nginx/prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sovereigntyos-network

  # --- Monitoring Services ---

  # Prometheus for metrics collection and alerting.
  prometheus:
    image: prom/prometheus:latest
    container_name: sovereigntyos-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      # Additional Prometheus configuration flags...
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - sovereigntyos-network

  # Grafana for visualizing metrics and creating dashboards.
  grafana:
    image: grafana/grafana:latest
    container_name: sovereigntyos-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - sovereigntyos-network

# Defines named volumes for persistent data storage.
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Defines the custom network for inter-service communication.
networks:
  sovereigntyos-network:
    driver: bridge
    # Defines a custom IP address range for the network.
    ipam:
      config:
        - subnet: 172.20.0.0/16