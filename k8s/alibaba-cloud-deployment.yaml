# SovereigntyOS AI - Alibaba Cloud ACK Deployment Configuration
# Optimized for Alibaba Container Service for Kubernetes (ACK)

apiVersion: v1
kind: Namespace
metadata:
  name: sovereigntyos-ai
  labels:
    app: sovereigntyos-ai
    environment: production
    cloud-provider: alibaba

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sovereigntyos-ai-config
  namespace: sovereigntyos-ai
data:
  NODE_ENV: "production"
  CLOUD_PROVIDER: "alibaba"
  REGION: "cn-hangzhou"  # Alibaba Cloud region
  LOG_LEVEL: "info"
  COGNITIVE_ARCHITECTURE_ENABLED: "true"
  MULTI_AGENT_ORCHESTRATOR: "true"
  # Alibaba Cloud specific configurations
  OSS_BUCKET: "sovereigntyos-ai-storage"
  RDS_CONNECTION_POOL_SIZE: "20"
  REDIS_CLUSTER_ENABLED: "true"

---
apiVersion: v1
kind: Secret
metadata:
  name: sovereigntyos-ai-secrets
  namespace: sovereigntyos-ai
type: Opaque
data:
  # Base64 encoded secrets (replace with actual values)
  DATABASE_URL: "<base64-encoded-database-url>"
  REDIS_URL: "<base64-encoded-redis-url>"
  OSS_ACCESS_KEY_ID: "<base64-encoded-oss-access-key>"
  OSS_ACCESS_KEY_SECRET: "<base64-encoded-oss-secret>"
  GPT5_API_KEY: "<base64-encoded-gpt5-key>"
  CLAUDE_API_KEY: "<base64-encoded-claude-key>"
  ZAI_API_KEY: "<base64-encoded-zai-key>"
  KIMI_API_KEY: "<base64-encoded-kimi-key>"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sovereigntyos-ai
  namespace: sovereigntyos-ai
  labels:
    app: sovereigntyos-ai
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: sovereigntyos-ai
  template:
    metadata:
      labels:
        app: sovereigntyos-ai
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      # Alibaba Cloud ACK node selector
      nodeSelector:
        kubernetes.io/os: linux
        node.kubernetes.io/instance-type: ecs.g6.large
      
      # Resource constraints for Alibaba Cloud
      containers:
      - name: sovereigntyos-ai
        image: registry.cn-hangzhou.aliyuncs.com/sovereigntyos/ai:latest
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        - containerPort: 8080
          name: websocket
          protocol: TCP
        
        env:
        - name: PORT
          value: "3000"
        - name: WEBSOCKET_PORT
          value: "8080"
        
        envFrom:
        - configMapRef:
            name: sovereigntyos-ai-config
        - secretRef:
            name: sovereigntyos-ai-secrets
        
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        
        # Volume mounts for temporary data
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache
      
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir:
          sizeLimit: 1Gi
      
      # Pod security and scheduling
      securityContext:
        fsGroup: 1000
      
      terminationGracePeriodSeconds: 30
      
      # Alibaba Cloud specific tolerations
      tolerations:
      - key: "workload"
        operator: "Equal"
        value: "ai-compute"
        effect: "NoSchedule"

---
apiVersion: v1
kind: Service
metadata:
  name: sovereigntyos-ai-service
  namespace: sovereigntyos-ai
  labels:
    app: sovereigntyos-ai
  annotations:
    service.beta.kubernetes.io/alibaba-cloud-loadbalancer-spec: "slb.s2.small"
    service.beta.kubernetes.io/alibaba-cloud-loadbalancer-charge-type: "PayByCLCU"
spec:
  type: LoadBalancer
  selector:
    app: sovereigntyos-ai
  ports:
  - name: http
    port: 80
    targetPort: 3000
    protocol: TCP
  - name: websocket
    port: 8080
    targetPort: 8080
    protocol: TCP
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 300

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sovereigntyos-ai-ingress
  namespace: sovereigntyos-ai
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    # Alibaba Cloud WAF integration
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Real-IP $remote_addr;
spec:
  tls:
  - hosts:
    - ai.sovereigntyos.com
    secretName: sovereigntyos-ai-tls
  rules:
  - host: ai.sovereigntyos.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sovereigntyos-ai-service
            port:
              number: 80
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: sovereigntyos-ai-service
            port:
              number: 8080

---
# Horizontal Pod Autoscaler for Alibaba Cloud
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: sovereigntyos-ai-hpa
  namespace: sovereigntyos-ai
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: sovereigntyos-ai
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

---
# Network Policy for enhanced security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: sovereigntyos-ai-network-policy
  namespace: sovereigntyos-ai
spec:
  podSelector:
    matchLabels:
      app: sovereigntyos-ai
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 8080
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS outbound
    - protocol: TCP
      port: 80   # HTTP outbound
    - protocol: TCP
      port: 5432 # PostgreSQL
    - protocol: TCP
      port: 6379 # Redis

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: sovereigntyos-ai-pdb
  namespace: sovereigntyos-ai
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: sovereigntyos-ai