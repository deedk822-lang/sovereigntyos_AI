name: Alibaba OSS Production Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment (skip cache)'
        required: false
        default: 'false'

env:
  NODE_VERSION: '20'
  BUILD_OUTPUT: 'dist'

jobs:
  build-and-deploy:
    name: Build & Deploy to Alibaba OSS
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: |
        npm audit --audit-level=high || echo "‚ö†Ô∏è Security issues found (non-blocking)"
    
    - name: Lint and type check
      run: |
        npm run lint
        npm run type-check
    
    - name: Run tests
      run: npm run test
    
    - name: Build application
      run: npm run build
    
    - name: Generate build metadata
      run: |
        BUILD_HASH=$(echo "${{ github.sha }}" | cut -c1-8)
        cat > ${{ env.BUILD_OUTPUT }}/build-info.json << JSON
        {
          "version": "1.0.0",
          "commit": "${{ github.sha }}",
          "buildHash": "$BUILD_HASH",
          "buildTime": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "branch": "${{ github.ref_name }}",
          "workflow": "${{ github.workflow }}",
          "environment": "production"
        }
        JSON
        echo "BUILD_HASH=$BUILD_HASH" >> $GITHUB_ENV
    
    - name: Setup Alibaba Cloud CLI
      run: |
        # Download and install Alibaba Cloud CLI
        wget -q https://aliyuncli.alicdn.com/aliyun-cli-linux-latest-amd64.tgz
        tar -xzf aliyun-cli-linux-latest-amd64.tgz
        sudo cp aliyun /usr/local/bin/
        aliyun --version
        
        # Configure credentials
        aliyun configure set \
          --profile akProfile \
          --mode AK \
          --region ${{ secrets.ALIBABA_REGION }} \
          --access-key-id ${{ secrets.ALIBABA_ACCESS_KEY_ID }} \
          --access-key-secret ${{ secrets.ALIBABA_ACCESS_KEY_SECRET }}
    
    - name: Deploy static files to OSS
      run: |
        echo "üöÄ Deploying SovereigntyOS to Alibaba OSS..."
        echo "üì¶ Bucket: ${{ secrets.ALIBABA_OSS_BUCKET }}"
        echo "üåç Region: ${{ secrets.ALIBABA_REGION }}"
        
        # Sync files to OSS with optimized settings
        aliyun oss sync ${{ env.BUILD_OUTPUT }}/ oss://${{ secrets.ALIBABA_OSS_BUCKET }}/ \
          --delete \
          --force \
          --update \
          --include "*.html,*.js,*.css,*.json,*.png,*.jpg,*.jpeg,*.svg,*.ico,*.webp,*.woff,*.woff2,*.txt" \
          --parallel 10 \
          --part-size 10485760
        
        echo "‚úÖ File sync completed"
    
    - name: Configure OSS for static website hosting
      run: |
        echo "üåê Configuring static website hosting..."
        
        # Enable static website hosting
        aliyun oss website --method put \
          --bucket ${{ secrets.ALIBABA_OSS_BUCKET }} \
          --index-document index.html \
          --error-document index.html
        
        # Set CORS policy for SPA
        aliyun oss cors --method put \
          --bucket ${{ secrets.ALIBABA_OSS_BUCKET }} \
          --cors-configuration '{
            "CORSRule": [{
              "AllowedOrigin": ["*"],
              "AllowedMethod": ["GET", "HEAD"],
              "AllowedHeader": ["*"],
              "MaxAgeSeconds": 3600
            }]
          }'
        
        echo "‚úÖ Static website hosting configured"
    
    - name: Invalidate CDN cache (if configured)
      if: ${{ secrets.ALIBABA_CDN_DOMAIN != '' }}
      run: |
        echo "üîÑ Invalidating CDN cache for ${{ secrets.ALIBABA_CDN_DOMAIN }}..."
        
        aliyun cdn RefreshObjectCaches \
          --ObjectPath "https://${{ secrets.ALIBABA_CDN_DOMAIN }}/*" \
          --ObjectType Directory
        
        echo "‚úÖ CDN cache invalidated"
    
    - name: Health check deployment
      run: |
        echo "üè• Running health check..."
        
        # Wait for deployment to propagate
        sleep 15
        
        # Determine the URL to check
        if [ -n "${{ secrets.ALIBABA_CDN_DOMAIN }}" ]; then
          HEALTH_URL="https://${{ secrets.ALIBABA_CDN_DOMAIN }}/build-info.json"
        else
          HEALTH_URL="https://${{ secrets.ALIBABA_OSS_BUCKET }}.oss-${{ secrets.ALIBABA_REGION }}.aliyuncs.com/build-info.json"
        fi
        
        echo "üåê Checking: $HEALTH_URL"
        
        # Perform health check with retry
        for i in {1..5}; do
          if curl -f -s "$HEALTH_URL" -o health-check.json; then
            echo "‚úÖ Health check passed on attempt $i"
            echo "üìä Build info:"
            cat health-check.json | jq .
            break
          else
            echo "‚ö†Ô∏è Health check failed, attempt $i/5"
            if [ $i -eq 5 ]; then
              echo "‚ùå Health check failed after 5 attempts, but deployment may still be successful"
              exit 0  # Don't fail the workflow
            fi
            sleep 10
          fi
        done
    
    - name: Deployment summary
      run: |
        echo "" 
        echo "üéâ SovereigntyOS deployment completed successfully!"
        echo "" 
        echo "üìä Deployment Details:"
        echo "  ‚Ä¢ Build Hash: ${{ env.BUILD_HASH }}"
        echo "  ‚Ä¢ Commit: ${{ github.sha }}"
        echo "  ‚Ä¢ Branch: ${{ github.ref_name }}"
        echo "  ‚Ä¢ OSS Bucket: ${{ secrets.ALIBABA_OSS_BUCKET }}"
        echo "  ‚Ä¢ Region: ${{ secrets.ALIBABA_REGION }}"
        echo "" 
        echo "üåê Access URLs:"
        echo "  ‚Ä¢ OSS Direct: https://${{ secrets.ALIBABA_OSS_BUCKET }}.oss-${{ secrets.ALIBABA_REGION }}.aliyuncs.com/"
        
        if [ -n "${{ secrets.ALIBABA_CDN_DOMAIN }}" ]; then
          echo "  ‚Ä¢ CDN (Primary): https://${{ secrets.ALIBABA_CDN_DOMAIN }}/"
        fi
        
        echo "" 
        echo "üõ°Ô∏è Security: SSL/TLS enabled, CORS configured"
        echo "‚ö° Performance: CDN acceleration ${{ secrets.ALIBABA_CDN_DOMAIN && 'enabled' || 'available (set ALIBABA_CDN_DOMAIN)' }}"
    
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-${{ env.BUILD_HASH }}
        path: |
          ${{ env.BUILD_OUTPUT }}/
          health-check.json
        retention-days: 30
    
    - name: Create deployment status
      uses: actions/github-script@v8
      with:
        script: |
          const buildHash = process.env.BUILD_HASH;
          const ossUrl = `https://${{ secrets.ALIBABA_OSS_BUCKET }}.oss-${{ secrets.ALIBABA_REGION }}.aliyuncs.com/`;
          const cdnUrl = '${{ secrets.ALIBABA_CDN_DOMAIN }}' ? `https://${{ secrets.ALIBABA_CDN_DOMAIN }}/` : null;
          
          await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'production',
            description: `SovereigntyOS deployment ${buildHash}`,
            auto_merge: false
          });