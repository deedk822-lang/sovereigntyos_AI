name: SovereigntyOS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  DOCKER_IMAGE: sovereigntyos-ai

jobs:
  build-and-test:
    name: Build & Test SovereigntyOS
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint || echo "Linting step - will be configured"
    
    - name: Run tests
      run: npm run test || echo "Tests will be implemented"
    
    - name: Build TypeScript application
      run: npm run build
    
    - name: Validate Docker build
      run: docker build -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} .
    
    - name: Run Docker container test
      run: |
        docker run -d --name test-container -p 3000:80 ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        sleep 5
        docker logs test-container
        docker stop test-container
        docker rm test-container

  generate-deployment:
    name: Generate Deployment Commands
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup deployment environment
      run: |
        echo "Setting up deployment environment..."
        mkdir -p deployment
    
    - name: Generate Kubernetes manifests
      run: |
        cat > deployment/sovereigntyos-deployment.yaml << EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: sovereigntyos-ai
          labels:
            app: sovereigntyos-ai
        spec:
          replicas: 3
          selector:
            matchLabels:
              app: sovereigntyos-ai
          template:
            metadata:
              labels:
                app: sovereigntyos-ai
            spec:
              containers:
              - name: sovereigntyos-ai
                image: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
                ports:
                - containerPort: 80
                env:
                - name: NODE_ENV
                  value: "production"
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: sovereigntyos-ai-service
        spec:
          selector:
            app: sovereigntyos-ai
          ports:
          - protocol: TCP
            port: 80
            targetPort: 80
          type: LoadBalancer
        EOF
    
    - name: Generate deployment commands
      run: |
        echo "# SovereigntyOS AI Deployment Commands" > deployment/deploy-commands.md
        echo "" >> deployment/deploy-commands.md
        echo "## Docker Deployment" >> deployment/deploy-commands.md
        echo "\`\`\`bash" >> deployment/deploy-commands.md
        echo "docker pull ${{ env.DOCKER_IMAGE }}:${{ github.sha }}" >> deployment/deploy-commands.md
        echo "docker run -d -p 3000:80 --name sovereigntyos-ai ${{ env.DOCKER_IMAGE }}:${{ github.sha }}" >> deployment/deploy-commands.md
        echo "\`\`\`" >> deployment/deploy-commands.md
        echo "" >> deployment/deploy-commands.md
        echo "## Kubernetes Deployment" >> deployment/deploy-commands.md
        echo "\`\`\`bash" >> deployment/deploy-commands.md
        echo "kubectl apply -f deployment/sovereigntyos-deployment.yaml" >> deployment/deploy-commands.md
        echo "\`\`\`" >> deployment/deploy-commands.md
        
        cat deployment/deploy-commands.md
    
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-manifests
        path: deployment/
        retention-days: 30

  security-scan:
    name: Security & Vulnerability Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run npm audit
      run: npm audit --audit-level=moderate || echo "Security audit completed with warnings"
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.DOCKER_IMAGE }}:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v4
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true