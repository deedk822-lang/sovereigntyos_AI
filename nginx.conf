#
# Nginx Configuration for SovereigntyOS AI Lab
#
# This configuration file defines how Nginx, running as a reverse proxy
# inside a Docker container, should handle incoming HTTP requests.
#

# The 'events' block contains directives for connection processing.
events {
    # Sets the maximum number of simultaneous connections that can be
    # opened by a single worker process.
    worker_connections 1024;
}

# The 'http' block defines directives for handling HTTP traffic.
http {
    # Includes a file that maps file extensions to MIME types.
    # This ensures that files are served with the correct Content-Type header.
    include /etc/nginx/mime.types;
    # Sets the default MIME type for files if a mapping is not found.
    default_type application/octet-stream;

    # Defines a virtual server to handle requests.
    server {
        # Listens on port 80 for incoming HTTP connections.
        listen 80;
        # The server name, typically the domain name. 'localhost' is used for local development.
        server_name localhost;
        # Sets the root directory for requests. This is where Nginx looks for files.
        # In the Dockerfile, the application's static assets are copied to this directory.
        root /usr/share/nginx/html;
        # Specifies the file to serve if a directory is requested.
        index index.html;

        # This location block is crucial for Single Page Applications (SPAs) like React.
        # It handles client-side routing.
        location / {
            # Tries to serve the requested file ($uri), then a directory ($uri/),
            # and if neither exists, it falls back to serving /index.html.
            # This allows the React router to handle the route on the client side.
            try_files $uri $uri/ /index.html;
        }

        # This location block acts as a reverse proxy for API requests.
        # It is currently a placeholder for when a backend service is added.
        location /api/ {
            # Forwards any request starting with /api/ to the backend service
            # running at 'http://backend:8000/'.
            proxy_pass http://backend:8000/;
        }
        
        # A simple health check endpoint.
        # Container orchestrators or monitoring tools can use this to verify
        # that the Nginx server is running and responsive.
        location /health {
            # Returns a 200 OK status code with a plain text body.
            return 200 "SovereigntyOS OK";
            # Explicitly sets the Content-Type header for the response.
            add_header Content-Type text/plain;
        }
    }
}